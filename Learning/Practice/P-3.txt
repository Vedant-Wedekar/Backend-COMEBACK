Setting Up app.js Like a Pro (or at Least Pretending to Be One)
1] Creating app.js (Because We’re Not Writing Spaghetti Code)
Let’s set up our Express app like professionals, because copy-pasting Stack Overflow answers doesn’t count as real coding.

import express from 'express';
const app = express();
import cookieParser from 'cookie-parser';
import cors from 'cors';

// 🚀 Setting up middlewares because raw requests are scary
app.use(express.json({ limit: "50mb" })); // No one likes "Payload Too Large" errors.
app.use(express.urlencoded({ limit: "50mb", extended: true })); // Because form submissions exist.
app.use(express.static('dist')); // Serve static files, because nobody likes a blank website.
app.use(cookieParser()); // We love cookies (not just the edible ones 🍪).
app.use(cors({ credentials: true, origin: process.env.CLIENT_URL })); // Frontend needs to talk to the backend. Let's allow that.

export { app };

Why?
JSON parsing? ✅ Check.
Handling large payloads? ✅ Check.
Serving static files? ✅ Check.
Cookies? ✅ Who doesn’t love cookies?
CORS? ✅ Because browsers love to complain about cross-origin requests.

2] Now Let’s Make Things Complicated (Because Simple Is Boring)
So, we’re connecting to the database AND running the server, all while making sure errors make us cry in the logs.

DBconnect()
  .then(() => {
    app.listen(process.env.PORT, () => {
      console.log(`🚀 Server is running on port ${process.env.PORT}`);
    });

    // Because servers love to crash in the worst ways possible.
    app.on("error", (error) => {
      console.error("❌ Server Error: ", error);
      throw error; // Because we like dramatic exits.
    });
  })
  .catch((error) => {
    console.error("❌ Database Connection Failed: ", error);
    // No process.exit(1) here? Guess we’re just gonna let it fail silently. 🤷‍♂️
  });
Why?

First, we connect to the database. Because trying to run a server without a database is like opening a restaurant without food.
Then, we start the server. Because what’s the point of a backend if it’s not actually running?
And finally, we handle errors. Because debugging cryptic error messages at 2 AM is a rite of passage.


Final Thoughts (Because TL;DR)
We set up app.js with all the fancy middlewares so that our API doesn’t break like a cheap phone screen.
We connect to the database first, then start the server (because logic matters).
We handle errors so that when things go wrong (they will), we at least know why we're crying.




